const paymentForm=document.getElementById('payment-form');$(this).find(".select2-search").select2({placeholder:"Select an option",allowClear:!0,});function initializeFormValidation(form,fields){return FormValidation.formValidation(form,{fields:fields,plugins:{trigger:new FormValidation.plugins.Trigger(),bootstrap5:new FormValidation.plugins.Bootstrap5({eleValidClass:'is-valid',rowSelector:function(field,ele){return'.mb-3'}}),autoFocus:new FormValidation.plugins.AutoFocus()}})}
function handleFormSubmission(formValidationInstance,formElement,url){formValidationInstance.validate().then(function(status){if(status==='Valid'){showBlockUI();$.ajax({url:url,type:"POST",data:new FormData(formElement),contentType:!1,cache:!1,processData:!1,dataType:'json',success:function(response){hideBlockUI();Swal.fire({title:'Payment Confirmation',text:"Please confirm that you want to complete this payment.",icon:'warning',showCancelButton:!0,confirmButtonText:'Yes, Delete customer!',customClass:{confirmButton:'btn btn-primary me-2',cancelButton:'btn btn-label-secondary'},buttonsStyling:!1}).then((result)=>{if(result.isConfirmed){if(response.status){Swal.fire({text:response.message,icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn fw-bold btn-primary",}}).then(()=>{window.location.reload()})}else{handleErrors(response)}}})},})}})}
function handleErrors(response){if(Object.keys(response.validation_errors).length>0){let html='<div class="text-start">Please check the following fields:</br>';html+='<ol>';$.each(response.validation_errors,function(key,value){html+=`<li><b>${value.label}</b> : ${value.message}</li>`});html+='</ol></div>';Swal.fire({title:response.message,icon:'error',html:html,showCloseButton:!0,focusConfirm:!0,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn fw-bold btn-primary",},buttonsStyling:!1})}else{Swal.fire({text:response.message,icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}}
let updateFormValidation;function initializeValidation(){return initializeFormValidation(paymentForm,{fields:{'attachments[membership_receipt]':{validators:{notEmpty:{message:'This field is required'},file:{extension:'jpg,jpeg',type:'image/jpeg,image/jpg',message:'Please choose a jpg or jpeg file'}}},details:{validators:{notEmpty:{message:'This field is required'}}},payment_date:{validators:{notEmpty:{message:'This field is required'}}}}})}
function updateValidation(selectedOption){switch(selectedOption){case "2":updateFormValidation.addField("account_num",{validators:{notEmpty:{message:"Account number is required for Bank Transfer",},},});updateFormValidation.addField("reference_no",{validators:{notEmpty:{message:"Reference number is required for Bank Transfer",},},});break;default:break}}
if(paymentForm){updateFormValidation=initializeValidation();$("#paymentMode").on("change",function(){const selectedOption=$(this).val();updateValidation(selectedOption)});$("#paymentMethod").on("change",function(){const selectedOption=$(this).val();updateValidation(selectedOption)});if($("#paymentMethod").is(":visible")){updateFormValidation.addField("payment_method",{validators:{notEmpty:{message:"E-wallet field is required",},},})}
if($("#referenceNo").is(":visible")){updateFormValidation.addField("reference_no",{validators:{notEmpty:{message:"Reference number is required",},},})}
if($("#accountNum").is(":visible")){updateFormValidation.addField("account_number",{validators:{notEmpty:{message:"Account number is required",},},})}
if($("#accNameContainer").is(":visible")){updateFormValidation.addField("account_name",{validators:{notEmpty:{message:"Account name is required",},},})}
paymentForm.addEventListener('submit',function(event){event.preventDefault();updateFormValidation.validate().then(function(status){if(status==='Valid'){handleFormSubmission(updateFormValidation,paymentForm,`${BASE_URL}Payment/upload_receipt`)}else{console.error('Form validation failed')}})})}