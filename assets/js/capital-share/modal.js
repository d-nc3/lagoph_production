$(document).ready(function(){const form=document.getElementById("paymentForm");var fetchDetails=function(url,itemId,successCallback){if(itemId){$.ajax({url:`${BASE_URL}${url}`,type:"POST",data:{id:itemId},dataType:"json",success:successCallback,error:function(){alert("Failed to fetch item details")},})}else{}};$("#paymentNo").on("change",function(){const payment_number=document.getElementById("paymentNo").value;if(payment_number){const userId=document.getElementById("user_id").value;const transaction_category=document.getElementById("transactionName").value;calculateAmount(payment_number,userId,transaction_category,function(totalAmount){if(totalAmount!==null){document.getElementById("totalPayment").value=totalAmount}else{alert("Error calculating total amount.")}})}});function calculateAmount(months,userId,transaction_category,callback){switch(transaction_category){case "2":fetchDetails("Capital_share/getAmount",userId,function(data){if(data){const parValue=parseFloat(data.amount_per_share);const totalAmount=months*parValue;callback(totalAmount)}else{callback(null)}});break;case "3":fetchDetails("Loan/getAmount",userId,function(data){if(data){const parValue=parseFloat(data.amount_due);const totalAmount=months*parValue;callback(totalAmount)}else{callback(null)}});break;default:callback(null);break}}
function fetchDetails(url,userId,callback){$.ajax({url:url,type:"POST",data:{user_id:userId},dataType:"json",success:function(response){callback(response.data)},error:function(xhr,status,error){console.error("Error:",error);callback(null)},})}
function fetchDetails(url,userId,callback){$.ajax({url:url,type:"POST",data:{user_id:userId},dataType:"json",success:function(response){callback(response.data)},error:function(xhr,status,error){console.error("Error:",error);callback(null)},})}
function displayOptionField(selectedOption){switch(selectedOption){case "1":$("#displayRange").hide();break;case "2":$("#displayRange").show();break;case "3":case "4":$("#startDate, #endDate").show();break;default:$("#startDate, #endDate, #financialContainer").hide();break}}
$("#paymentScope").on("change",function(){const selectedOption=$(this).val();displayOptionField(selectedOption)});$("#paymentMethod").on("change",function(){const selectedOption=$(this).val();displayWalletField(selectedOption);updateValidation(selectedOption)});function displayWalletField(selectedOption){switch(selectedOption){case "2":$("#accNumContainer,#accNameContainer").show();break;case "11":$("#refNumContainer,#accNumContainer,#accNameContainer").show();break;case "21":break}}
function initializeValidation(){const fields={"attachments[payment_receipt]":{validators:{notEmpty:{message:"This field is required",},file:{extension:"jpg,jpeg",type:"image/jpeg,image/jpg",message:"Please choose a jpg or jpeg file",},},},transaction_name:{validators:{notEmpty:{message:"Please select a category",},},},payment_mode:{validators:{notEmpty:{message:"This field is required",},},},payment_frequency:{validators:{notEmpty:{message:"This field is required",},},},payment_method:{validators:{notEmpty:{message:"This field is required",},},},number_of_payments:{validators:{notEmpty:{message:"This field is required",},},},total_payment:{validators:{notEmpty:{message:"This field is required",},},},};if($("#referenceNo").is(":visible")){fields.reference_number={validators:{notEmpty:{message:"Reference number is required",},},}}
if($("#accountNum").is(":visible")){fields.account_number={validators:{notEmpty:{message:"Account number is required",},},}}
if($("#accNameContainer").is(":visible")){fields.account_name={validators:{notEmpty:{message:"Account name is required",},},}}
return FormValidation.formValidation(form,{fields:fields,plugins:{trigger:new FormValidation.plugins.Trigger(),bootstrap5:new FormValidation.plugins.Bootstrap5({eleValidClass:"is-valid",rowSelector:function(field,ele){return".mb-3"},}),autoFocus:new FormValidation.plugins.AutoFocus(),},})}
let updateFormValidation=initializeValidation();function updateValidation(selectedOption){updateFormValidation.destroy();updateFormValidation=initializeValidation();switch(selectedOption){case "2":updateFormValidation.update("account_number",{validators:{notEmpty:{message:"Account number is required for Bank Transfer",},},});updateFormValidation.update("reference_no",{validators:{notEmpty:{message:"Reference number is required for Gcash",},},});break;default:break}}
document.querySelector(".save").addEventListener("click",function(event){event.preventDefault();updateFormValidation.validate().then(function(status){if(status==="Valid"){showBlockUI();$.ajax({url:`${BASE_URL}Capital_share/payment`,type:"POST",data:new FormData(form),contentType:!1,cache:!1,processData:!1,dataType:"json",success:function(response){hideBlockUI();if(response.status){console.log("ID of the posted value:",response);Swal.fire({text:response.message,icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn fw-bold btn-primary",},}).then(()=>{console.log(response.id);window.location.href=`${BASE_URL}Capital_share/confirming_receipt/${response.id}`})}else{if(Object.keys(response.validation_errors).length>0){let html='<div class="text-start">Please check the following fields:</br>';html+="<ol>";$.each(response.validation_errors,function(key,value){html+="<li><b>"+value.label+"</b> : "+value.message+"</li>"});html+="</ol></div>";Swal.fire({title:response.message,icon:"error",html:html,showCloseButton:!0,focusConfirm:!0,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn fw-bold btn-primary",},buttonsStyling:!1,})}else{Swal.fire({text:response.message,icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary",},})}}},error:function(xhr){hideBlockUI();Swal.fire({text:"Sorry, looks like there are some errors detected, please try again.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary",},})},})}})})})