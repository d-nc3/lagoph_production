$(function(){const approveBtn=document.querySelectorAll('.btn-receipt');const updateForm=document.getElementById('approval-form');$('.select2').select2({placeholder:"Select an option",allowClear:!0});function defaultField(){$('#accNumContainer,#accNameContainer,#refNumContainer').hide()}
function displayOptionField(selectedOption){switch(selectedOption){case '1':break;case '2':break;case '3':$('#financialContainer').show();break;default:break}}
function displayWalletField(selectedOption){switch(selectedOption){case '2':$('#accNumContainer,#accNameContainer').show();break;case '11':$('#refNumContainer,#accNumContainer,#accNameContainer').show();break}}
const updateFormValidation=FormValidation.formValidation(updateForm,{fields:{payment_mode:{validators:{notEmpty:{message:'This field is required'}}},payment_status:{validators:{notEmpty:{message:'This field is required'}}},total_payment:{validators:{notEmpty:{message:'This field is required'}}},cashier_name:{validators:{notEmpty:{message:'This field is required'}}}},plugins:{trigger:new FormValidation.plugins.Trigger(),bootstrap5:new FormValidation.plugins.Bootstrap5({eleValidClass:'is-valid',rowSelector:function(field,ele){return'.mb-3'}}),autoFocus:new FormValidation.plugins.AutoFocus()}})
function updateValidationBasedOnFinancialInstitution(selectedOption){updateFormValidation.update('account_name',{validators:{}});updateFormValidation.update('reference_no',{validators:{}});switch(selectedOption){case '1':updateFormValidation.update('reference_no',{validators:{notEmpty:{message:'Reference number is required for Gcash'}}}),updateFormValidation.update('account_name',{validators:{notEmpty:{message:'Reference number is required for Gcash'}}})
break;case '2':updateFormValidation.update('account_name',{validators:{notEmpty:{message:'Account number is required for Bank Transfer'}}});break;case '11':break;case '12':break;default:break}}
$('#paymentMode').on('change',function(){defaultField();const selectedOption=$(this).val();displayOptionField(selectedOption);updateValidation(selectedOption);updateValidationBasedOnFinancialInstitution(selectedOption)});$('#financialInstitution').on('change',function(){defaultField();const selectedOption=$(this).val();displayWalletField(selectedOption);updateValidation(selectedOption)});updateForm.addEventListener('submit',function(event){event.preventDefault();updateFormValidation.validate().then(function(status){if(status==='Valid'){showBlockUI();$.ajax({url:`${BASE_URL}Cashiering/save_payment_transaction`,type:"POST",data:new FormData(updateForm),contentType:!1,cache:!1,processData:!1,dataType:'json',success:function(response){hideBlockUI();if(response.status){Swal.fire({text:response.message,icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn fw-bold btn-primary",}}).then(()=>{window.location.href=BASE_URL+'Cashiering/official_transaction_receipt'})}else{if(Object.keys(response.validation_errors).length>0){let html='<div class="text-start">Please check the following fields:</br>';html+='<ol>';$.each(response.validation_errors,function(key,value){html+='<li><b>'+value.label+'</b> : '+value.message+'</li>'});html+='</ol></div>';Swal.fire({title:response.message,icon:'error',html:html,showCloseButton:!0,showCancelButton:!0,focusConfirm:!0,showCancelButton:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn fw-bold btn-primary",},buttonsStyling:!1})}else{Swal.fire({text:response.message,icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}}},error:function(error){hideBlockUI();Swal.fire({text:"Sorry, looks like there are some errors detected, please try again.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}})}})})})